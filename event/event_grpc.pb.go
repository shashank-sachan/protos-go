// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.3
// source: event/event.proto

package event

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// EventProcessorServiceClient is the client API for EventProcessorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type EventProcessorServiceClient interface {
	PushEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error)
}

type eventProcessorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewEventProcessorServiceClient(cc grpc.ClientConnInterface) EventProcessorServiceClient {
	return &eventProcessorServiceClient{cc}
}

func (c *eventProcessorServiceClient) PushEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/EventProcessorService/PushEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventProcessorServiceServer is the server API for EventProcessorService service.
// All implementations must embed UnimplementedEventProcessorServiceServer
// for forward compatibility
type EventProcessorServiceServer interface {
	PushEvent(context.Context, *Event) (*Response, error)
	mustEmbedUnimplementedEventProcessorServiceServer()
}

// UnimplementedEventProcessorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedEventProcessorServiceServer struct {
}

func (UnimplementedEventProcessorServiceServer) PushEvent(context.Context, *Event) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PushEvent not implemented")
}
func (UnimplementedEventProcessorServiceServer) mustEmbedUnimplementedEventProcessorServiceServer() {}

// UnsafeEventProcessorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to EventProcessorServiceServer will
// result in compilation errors.
type UnsafeEventProcessorServiceServer interface {
	mustEmbedUnimplementedEventProcessorServiceServer()
}

func RegisterEventProcessorServiceServer(s grpc.ServiceRegistrar, srv EventProcessorServiceServer) {
	s.RegisterService(&EventProcessorService_ServiceDesc, srv)
}

func _EventProcessorService_PushEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventProcessorServiceServer).PushEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/EventProcessorService/PushEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventProcessorServiceServer).PushEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// EventProcessorService_ServiceDesc is the grpc.ServiceDesc for EventProcessorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var EventProcessorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EventProcessorService",
	HandlerType: (*EventProcessorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PushEvent",
			Handler:    _EventProcessorService_PushEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "event/event.proto",
}
